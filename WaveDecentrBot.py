import json
import os
import asyncio
import logging
import mysql.connector
from datetime import datetime
from html.parser import HTMLParser
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes, ChatMemberHandler, CallbackQueryHandler,
    ConversationHandler, MessageHandler, filters, Application
)
from telegram.error import BadRequest

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
DB_HOST = "localhost"
DB_USER = "root"
DB_PASSWORD = "12345sport"
DB_NAME = "my_new_database"
BOT_TOKEN = "7556706480:AAHq2ZKWai4YaFsJMVCihFAUb5sOC8MLdYA"
ADMIN_IDS = [1454893897]
WELCOME_FILE = 'welcome_config.json'
TELEGRAM_MESSAGE_LIMIT = 4096  # –õ–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ Telegram
# The above code is a Python script that seems to be setting up a quiz or trivia game. It defines a
# question and expects an answer to be provided. The answer is currently empty and needs to be filled
# in.

# --- –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã ---
QUIZ_QUESTION = 0
quiz_questions = [
    ("–í –∫–∞–∫–æ–º –≥–æ–¥—É Decentrathon –≤–ø–µ—Ä–≤—ã–µ —Å—Ç–∞–ª –∑–∞–º–µ—Ç–Ω—ã–º —Å–æ–±—ã—Ç–∏–µ–º –Ω–∞ IT-—Å—Ü–µ–Ω–µ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞, –∏ —Å–∫–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –∫–æ–º–∞–Ω–¥ –æ–Ω —Å–æ–±—Ä–∞–ª –≤ —Ç–æ—Ç –≥–æ–¥??", ["–í 2023 –≥–æ–¥—É", "–í 2022 –≥–æ–¥—É", "–í 2021 –≥–æ–¥—É"], 0),
    ("–ì–¥–µ –º–æ–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?", ["@decentra_world_bot", "github.com", "Google"], 0),
    ("–ö—Ç–æ –º–æ–∂–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å?", ["–í—Å–µ", "–¢–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç—ã", "–¢–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã"], 0),
]
user_scores = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –æ—á–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# --- –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥–∏–¥–∞ ---
GUIDE_STEP = 0
guide_steps = [
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Decentrathon! –≠—Ç–æ –∫–æ–Ω–∫—É—Ä—Å –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.",
    "–ü–µ—Ä–≤—ã–π —ç—Ç–∞–ø ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Å–∞–π—Ç–µ decentrathon.kz.",
    "–í—Ç–æ—Ä–æ–π —ç—Ç–∞–ø ‚Äî —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –∏—é–ª—è.",
    "–§–∏–Ω–∞–ª –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤ –∞–≤–≥—É—Å—Ç–µ —Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.",
    "–£–¥–∞—á–∏ –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è!"
]

# --- –î–∞–Ω–Ω—ã–µ –¥–ª—è FAQ ---
FAQ = """
‚ùì *–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –ø–æ Decentrathon*

1Ô∏è‚É£ –ö–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?  
- –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –º–æ–∂–Ω–æ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ decentrathon.kz.

2Ô∏è‚É£ –ö–∞–∫–æ–≤—ã –¥–µ–¥–ª–∞–π–Ω—ã?  
- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ 15 –∏—é–Ω—è, —ç—Ç–∞–ø —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ ‚Äî –∏—é–ª—å, —Ñ–∏–Ω–∞–ª ‚Äî –∞–≤–≥—É—Å—Ç.

3Ô∏è‚É£ –ö—Ç–æ –º–æ–∂–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å?  
- –õ—é–±–æ–π –∂–µ–ª–∞—é—â–∏–π, —Å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º –ø—Ä–∞–≤–∏–ª –∫–æ–Ω–∫—É—Ä—Å–∞.
"""

# --- –î–∞–Ω–Ω—ã–µ –¥–ª—è /about ---
ABOUT_TEXT = """
Decentrathon ‚Äî —ç—Ç–æ –∫–æ–Ω–∫—É—Ä—Å –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏ –ø—Ä–æ–µ–∫—Ç–æ–≤.

–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: https://decentrathon.kz
"""

# --- –î–∞–Ω–Ω—ã–µ –¥–ª—è /contacts ---
CONTACTS_TEXT = """
üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤ Decentrathon:

- Email: support@decentrathon.kz  
- Telegram: @DecentrathonSupport  
- –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: vk.com/decentrathon  
"""

# --- –î–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
REMINDERS = [
    {"date": "2025-06-15", "message": "üìÖ –î–µ–¥–ª–∞–π–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ Decentrathon: 15 –∏—é–Ω—è!"},
    {"date": "2025-07-01", "message": "üìÖ –ù–∞—á–∞–ª–æ —ç—Ç–∞–ø–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: 1 –∏—é–ª—è!"},
    {"date": "2025-08-01", "message": "üìÖ –§–∏–Ω–∞–ª Decentrathon: –∞–≤–≥—É—Å—Ç!"},
]

# --- –î–∞–Ω–Ω—ã–µ –¥–ª—è /feedback ---
FEEDBACK_MESSAGE = 0

# --- –§–∏–ª—å—Ç—Ä –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–æ–æ–±—â–µ–Ω–∏–π ---
last_user_messages = {}
tracked_texts = ["–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "üèÜ", "‚öΩ", "üèÄ"]


# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
if not os.path.exists(WELCOME_FILE):
    default_config = {
        "text": (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Decentrathon!\n\n"
            "–≠—Ç–æ –∫–æ–º—å—é–Ω–∏—Ç–∏ –ø—Ä–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –¥–≤–∏–∂–µ–Ω–∏–µ –∏ –∏–¥–µ–∏. "
            "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏, —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∏–≤–µ–Ω—Ç–∞—Ö –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å—Å—è –¥—Ä—É–≥–∏–º–∏! \n\n"
            "‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ Decentrathon?\n"
            " Decentrathon ‚Äî –∫—Ä—É–ø–Ω–µ–π—à–∏–π –º–Ω–æ–≥–æ–ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–π —Ö–∞–∫–∞—Ç–æ–Ω –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ."
            "–≠—Ç–æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è IT-—ç–Ω—Ç—É–∑–∏–∞—Å—Ç–æ–≤.\n\n"
            "–≠—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∏–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –º–∞—Ä–∞—Ñ–æ–Ω, –≥–¥–µ —Ç—ã, —Ä–∞–±–æ—Ç–∞—è —Å–æ–ª–æ –∏–ª–∏ –≤ –∫–æ–º–∞–Ω–¥–µ, –∑–∞ 48‚Äì72 —á–∞—Å–∞ —Å–æ–∑–¥–∞—ë—à—å —Ä–µ—à–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á.\n\n"
            "–•–∞–∫–∞—Ç–æ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤ –ê—Å—Ç–∞–Ω–µ, –ê–ª–º–∞—Ç—ã, –®—ã–º–∫–µ–Ω—Ç–µ, –ö–∞—Ä–∞–≥–∞–Ω–¥–µ, –ê–∫—Ç–æ–±–µ, –ê—Ç—ã—Ä–∞—É, –ü–∞–≤–ª–æ–¥–∞—Ä–µ, –°–µ–º–µ–µ –∏ –¥—Ä—É–≥–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ ‚Äî —ç—Ç–æ –∫—Ä—É–ø–Ω–µ–π—à–µ–µ IT-—Å–æ–±—ã—Ç–∏–µ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –ê–∑–∏–∏!\n\n"
            "‚Ä¢ <a href='https://t.me/decentra_world_bot/app'>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Ö–∞–∫–∞—Ç–æ–Ω–æ–≤</a>\n"
            "‚Ä¢ <a href='https://t.me/+udwyw0P7MAIzNzYy'>–ß–∞—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞</a>\n"
            "ü§ù <b>–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ –∏ —Ä–µ–∫–ª–∞–º–∞:</b> @sammExe\n\n"
            "–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ö–∞–∫–∞—Ç–æ–Ω: <a href='https://astanahub.com/ru/article/decentrathon-3-0-startuet-natsionalnyi-onlain-khakaton-s-prizovym-fondom-16-million–æ–≤-tenge'>Decentrathon 3.0</a>\n\n"
            "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –¥–≤–∏–∂–µ–Ω–∏—é –∏ —Å–æ–∑–¥–∞–≤–∞–π –±—É–¥—É—â–µ–µ –≤–º–µ—Å—Ç–µ —Å –Ω–∞–º–∏!"
        ),
        "buttons": [
            {"text": "üöÄ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Ö–∞–∫–∞—Ç–æ–Ω–æ–≤", "url": "https://t.me/decentra_world_bot/app"},
            {"text": "üìö –ê—Ä—Ö–∏–≤ –∏–≤–µ–Ω—Ç–æ–≤", "url": "https://www.instagram.com/decentrathon/?igsh=M2tmMXUydTVkNjZp"},
            {"text": "üí¨ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É", "url": "https://t.me/+udwyw0P7MAIzNzYy"}
        ]
    }
    try:
        with open(WELCOME_FILE, 'w', encoding='utf-8') as f:
            json.dump(default_config, f, indent=2, ensure_ascii=False)
        logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

def load_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è."""
    try:
        with open(WELCOME_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return {"text": "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.", "buttons": []}

def save_config(config):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è."""
    try:
        with open(WELCOME_FILE, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2, ensure_ascii=False)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

# --- –í–∞–ª–∏–¥–∞—Ü–∏—è HTML ---
class HTMLValidator(HTMLParser):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç HTML –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–ª—è Telegram."""
    def __init__(self):
        super().__init__()
        self.stack = []
        self.errors = []
        self.allowed_tags = {'b', 'i', 'a', 'br', 'strong', 'em', 'code', 'pre', 's', 'u', 'tg-spoiler', 'tg-emoji'}
        self.nesting_level = 0
        self.max_nesting = 1  # –ó–∞–ø—Ä–µ—â–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏

    def handle_starttag(self, tag, attrs):
        if tag not in self.allowed_tags:
            self.errors.append(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–µ–≥: <{tag}>")
            return
        if self.nesting_level >= self.max_nesting:
            self.errors.append(f"–ó–∞–ø—Ä–µ—â–µ–Ω–æ –≤–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–≥–æ–≤: <{tag}> –Ω–∞ —É—Ä–æ–≤–Ω–µ {self.nesting_level + 1}")
        self.stack.append(tag)
        self.nesting_level += 1

    def handle_endtag(self, tag):
        if not self.stack:
            self.errors.append(f"–ó–∞–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥ </{tag}> –±–µ–∑ –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–≥–æ")
            return
        if self.stack[-1] != tag:
            self.errors.append(f"–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ–≥–æ–≤: –æ–∂–∏–¥–∞–ª—Å—è </{self.stack[-1]}>, –ø–æ–ª—É—á–µ–Ω </{tag}>")
        self.stack.pop()
        self.nesting_level -= 1

    def validate(self, html_text):
        self.feed(html_text)
        self.close()
        if self.stack:
            self.errors.append(f"–ù–µ –∑–∞–∫—Ä—ã—Ç—ã —Ç–µ–≥–∏: {', '.join(self.stack)}")
        return not self.errors, self.errors

def validate_html(html_text):
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç HTML –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    validator = HTMLValidator()
    is_valid, errors = validator.validate(html_text)
    return is_valid, errors

# --- –£—Ç–∏–ª–∏—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ---
def get_db_connection():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
    try:
        conn = mysql.connector.connect(
            host=DB_HOST,
            user=DB_USER,
            password=DB_PASSWORD,
            database=DB_NAME,
            connection_timeout=5
        )
        logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
        return conn
    except mysql.connector.Error as err:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {err}")
        return None

async def create_tables():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã users –∏ events."""
    conn = get_db_connection()
    if conn:
        cursor = conn.cursor()
        try:
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    id BIGINT PRIMARY KEY,
                    username VARCHAR(255),
                    first_name VARCHAR(255),
                    last_name VARCHAR(255),
                    joined_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                    notify_events BOOLEAN DEFAULT TRUE,
                    subscribed BOOLEAN DEFAULT FALSE
                );
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS events (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    name VARCHAR(255) NOT NULL,
                    description TEXT,
                    event_date DATE,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
                );
            """)
            conn.commit()
            logger.info("–¢–∞–±–ª–∏—Ü—ã users –∏ events –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã/—Å–æ–∑–¥–∞–Ω—ã.")
        except mysql.connector.Error as err:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {err}")
        finally:
            cursor.close()
            conn.close()

async def add_user_to_db(user_id: int, username: str, first_name: str, last_name: str = None):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î."""
    conn = get_db_connection()
    if conn:
        cursor = conn.cursor()
        try:
            cursor.execute("SELECT id FROM users WHERE id = %s", (user_id,))
            if cursor.fetchone():
                logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –≤ –ë–î.")
                return
            sql = """
                INSERT INTO users (id, username, first_name, last_name)
                VALUES (%s, %s, %s, %s)
            """
            cursor.execute(sql, (user_id, username, first_name, last_name))
            conn.commit()
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î.")
        except mysql.connector.Error as err:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {err}")
            conn.rollback()
        finally:
            cursor.close()
            conn.close()

async def update_user_subscription(user_id: int, subscribed: bool):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    conn = get_db_connection()
    if conn:
        cursor = conn.cursor()
        try:
            cursor.execute("UPDATE users SET subscribed = %s WHERE id = %s", (subscribed, user_id))
            conn.commit()
            logger.info(f"–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω: {subscribed}")
        except mysql.connector.Error as err:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {err}")
            conn.rollback()
        finally:
            cursor.close()
            conn.close()

async def get_subscribed_users():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π."""
    conn = get_db_connection()
    if conn:
        cursor = conn.cursor()
        try:
            cursor.execute("SELECT id FROM users WHERE subscribed = TRUE")
            return [row[0] for row in cursor.fetchall()]
        except mysql.connector.Error as err:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {err}")
        finally:
            cursor.close()
            conn.close()
    return []

async def add_event_to_db(name: str, description: str, event_date: str):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ –ë–î."""
    conn = get_db_connection()
    if conn:
        cursor = conn.cursor()
        try:
            sql = """
                INSERT INTO events (name, description, event_date)
                VALUES (%s, %s, %s)
            """
            cursor.execute(sql, (name, description, event_date))
            conn.commit()
            logger.info(f"–°–æ–±—ã—Ç–∏–µ '{name}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ë–î.")
        except mysql.connector.Error as err:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {err}")
            conn.rollback()
        finally:
            cursor.close()
            conn.close()

async def get_users_for_notifications():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏."""
    conn = get_db_connection()
    if conn:
        cursor = conn.cursor()
        try:
            cursor.execute("SELECT id FROM users WHERE notify_events = TRUE")
            return [row[0] for row in cursor.fetchall()]
        except mysql.connector.Error as err:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {err}")
        finally:
            cursor.close()
            conn.close()
    return []

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º."""
    return user_id in ADMIN_IDS

def main_menu_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ÑπÔ∏è –û Decentrathon", url="https://example.com/about_decentrathon")]
    ])

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    config = load_config()
    try:
        keyboard = InlineKeyboardMarkup(
            [[InlineKeyboardButton(btn['text'], url=btn['url'])] for btn in config['buttons']]
        )
        await update.message.reply_text(
            config["text"],
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    except BadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ /start: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º.")

async def welcome_new_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Ç–æ–ª—å–∫–æ –≤ –õ–°."""
    result = update.chat_member
    if result.new_chat_member.status == "member" and (not result.old_chat_member or result.old_chat_member.status in ("left", "kicked")):
        user = result.new_chat_member.user
        config = load_config()
        keyboard = InlineKeyboardMarkup(
            [[InlineKeyboardButton(btn['text'], url=btn['url'])] for btn in config["buttons"]]
        )
        try:
            await context.bot.send_message(
                chat_id=user.id,
                text=config["text"],
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            logger.info(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.full_name} ({user.id})")
            username = user.username if user.username else None
            first_name = user.first_name if user.first_name else None
            last_name = user.last_name if user.last_name else None
            await add_user_to_db(user.id, username, first_name, last_name)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {e}")

async def set_welcome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π HTML."""
    user = update.effective_user
    if not user or not user.id or not is_admin(user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    if not context.args:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_welcome <—Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è>\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ HTML-—Ç–µ–≥–∏: <b>, <i>, <a href='...'>, <br>.\n"
            "–ü—Ä–∏–º–µ—Ä: /set_welcome üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! <a href='https://example.com'>–°—Å—ã–ª–∫–∞</a>\n"
            "–¢–µ–∫—Å—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å HTML.",
            parse_mode='Markdown'
        )
        return
    text = " ".join(context.args)
    is_valid, errors = validate_html(text)
    if not is_valid:
        await update.message.reply_text(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∏ –≤ HTML:\n" + "\n".join([f"‚Ä¢ {e}" for e in errors]),
            parse_mode='Markdown'
        )
        return
    config = load_config()
    config["text"] = text
    save_config(config)
    await update.message.reply_text("‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    logger.info(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–æ–º {user.id}")

async def set_links(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫."""
    user = update.effective_user
    if not user or not user.id or not is_admin(user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    if not context.args:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_links <json –∫–Ω–æ–ø–æ–∫>\n"
            "–ü—Ä–∏–º–µ—Ä: `[{\"text\": \"–ö–Ω–æ–ø–∫–∞\", \"url\": \"https://example.com\"}]`\n"
            "‚ö†Ô∏è –ù–µ –±–æ–ª–µ–µ 4 –∫–Ω–æ–ø–æ–∫.",
            parse_mode='Markdown'
        )
        return
    try:
        buttons = json.loads(" ".join(context.args))
        for btn in buttons:
            if not isinstance(btn, dict) or 'text' not in btn or 'url' not in btn:
                raise ValueError("–ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'text' –∏ 'url'.")
            if not isinstance(btn['text'], str) or not isinstance(btn['url'], str):
                raise ValueError("'text' –∏ 'url' –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç—Ä–æ–∫–∞–º–∏.")
        if len(buttons) > 4:
            await update.message.reply_text("‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ 4 –∫–Ω–æ–ø–æ–∫.", parse_mode='Markdown')
        config = load_config()
        config["buttons"] = buttons
        save_config(config)
        await update.message.reply_text("‚úÖ –ö–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        logger.info(f"–ö–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–æ–º {user.id}")
    except json.JSONDecodeError as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ JSON: `{e}`.", parse_mode='Markdown')
    except ValueError as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: `{e}`", parse_mode='Markdown')

async def preview(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∞ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è."""
    user = update.effective_user
    if not user or not user.id or not is_admin(user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    config = load_config()
    keyboard = InlineKeyboardMarkup(
        [[InlineKeyboardButton(btn['text'], url=btn['url'])] for btn in config["buttons"]]
    )
    try:
        await update.message.reply_text(
            config["text"],
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        logger.info(f"–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω –∞–¥–º–∏–Ω–æ–º {user.id}")
    except BadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ HTML.")

async def empty_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞."""
    user = update.effective_user
    if not user or not user.id or not is_admin(user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    try:
        await context.bot.set_my_commands(commands=[])
        await update.message.reply_text("‚úÖ –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –æ—á–∏—â–µ–Ω.")
        logger.info(f"–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –æ—á–∏—â–µ–Ω –∞–¥–º–∏–Ω–æ–º {user.id}")
    except BadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–º–∞–Ω–¥: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ–º–∞–Ω–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ /empty: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")

async def notify_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    user = update.effective_user
    if not user or not user.id or not is_admin(user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    if len(context.args) < 3:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /notify <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–¥–∞—Ç–∞ YYYY-MM-DD> <–æ–ø–∏—Å–∞–Ω–∏–µ>\n"
            "–ü—Ä–∏–º–µ—Ä: /notify AI Hackathon 2025-12-01 –•–∞–∫–∞—Ç–æ–Ω –ø–æ –ò–ò —Å –ø—Ä–∏–∑–∞–º–∏!",
            parse_mode='Markdown'
        )
        return
    name = context.args[0]
    try:
        event_date = datetime.strptime(context.args[1], '%Y-%m-%d').date()
        description = " ".join(context.args[2:])
        await add_event_to_db(name, description, event_date)
        user_ids = await get_users_for_notifications()
        for user_id in user_ids:
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üì¢ –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ: <b>{name}</b>\n–î–∞—Ç–∞: {event_date}\n{description}",
                    parse_mode='HTML'
                )
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        await update.message.reply_text("‚úÖ –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã.")
        logger.info(f"–°–æ–±—ã—Ç–∏–µ '{name}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–æ–º {user.id}")
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD.", parse_mode='Markdown')

async def start_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—É."""
    user_id = update.effective_user.id
    user_scores[user_id] = 0
    context.user_data['quiz_q'] = 0
    await send_quiz_question(update, context)
    return QUIZ_QUESTION

async def send_quiz_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã."""
    q_index = context.user_data['quiz_q']
    question, options, _ = quiz_questions[q_index]
    keyboard = [
        [InlineKeyboardButton(opt, callback_data=str(i))] for i, opt in enumerate(options)
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            text=f"–í–æ–ø—Ä–æ—Å {q_index+1}:\n{question}", reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            text=f"–í–æ–ø—Ä–æ—Å {q_index+1}: {question}", reply_markup=reply_markup
        )

async def quiz_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã."""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    selected = int(query.data)
    q_index = context.user_data['quiz_q']
    _, _, correct_index = quiz_questions[q_index]
    if selected == correct_index:
        user_scores[user_id] += 1
    context.user_data['quiz_q'] += 1
    if context.user_data['quiz_q'] < len(quiz_questions):
        await send_quiz_question(update, context)
        return QUIZ_QUESTION
    else:
        score = user_scores.get(user_id, 0)
        await query.edit_message_text(text=f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score} –∏–∑ {len(quiz_questions)}")
        return ConversationHandler.END

async def start_guide(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥–∏–¥."""
    context.user_data['guide_step'] = 0
    text = guide_steps[0]
    keyboard = [[InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data="next")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(text=text, reply_markup=reply_markup)
    return GUIDE_STEP

async def guide_next(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –≥–∏–¥–∞."""
    query = update.callback_query
    await query.answer()
    step = context.user_data.get('guide_step', 0) + 1
    if step < len(guide_steps):
        context.user_data['guide_step'] = step
        keyboard = [[InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data="next")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=guide_steps[step], reply_markup=reply_markup)
        return GUIDE_STEP
    else:
        await query.edit_message_text(text="–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ! –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /guide.")
        return ConversationHandler.END

async def faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç FAQ."""
    try:
        text_parts = [FAQ[i:i+TELEGRAM_MESSAGE_LIMIT] for i in range(0, len(FAQ), TELEGRAM_MESSAGE_LIMIT)]
        for part in text_parts:
            await update.message.reply_text(part, parse_mode='Markdown')
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /faq –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ FAQ: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ FAQ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Decentrathon."""
    try:
        await update.message.reply_text(ABOUT_TEXT)
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /about –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ /about: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    user_id = update.effective_user.id
    try:
        await update_user_subscription(user_id, True)
        await update.message.reply_text("–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def unsubscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
    user_id = update.effective_user.id
    try:
        await update_user_subscription(user_id, False)
        await update.message.reply_text("–í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def contacts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."""
    try:
        await update.message.reply_text(CONTACTS_TEXT)
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /contacts –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def start_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤.")
    return FEEDBACK_MESSAGE

async def receive_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∞–¥–º–∏–Ω—É."""
    user_id = update.effective_user.id
    username = update.effective_user.username or "–ù–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    text = update.message.text
    try:
        for admin_id in ADMIN_IDS:
            await context.bot.send_message(
                chat_id=admin_id,
                text=f"üì© –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç @{username} (ID: {user_id}):\n{text}"
            )
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –û–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º.")
        logger.info(f"–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∞–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    return ConversationHandler.END

async def delete_repeated(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è."""
    user_id = update.effective_user.id
    text = update.message.text
    try:
        if text and any(t in text.lower() for t in tracked_texts):
            last_text = last_user_messages.get(user_id)
            if last_text == text:
                try:
                    await update.message.delete()
                    logger.info(f"–£–¥–∞–ª–µ–Ω–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {user_id}: {e}")
            else:
                last_user_messages[user_id] = text
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤."""
    query = update.callback_query
    user_id = query.from_user.id
    try:
        await query.answer()
        await query.message.edit_text(
            text="–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞.",
            reply_markup=main_menu_keyboard(),
            parse_mode='HTML'
        )
        logger.info(f"Callback –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
    except BadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback-–∑–∞–ø—Ä–æ—Å–µ: {e}")
        await query.message.edit_text(
            text="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.",
            reply_markup=main_menu_keyboard(),
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback-–∑–∞–ø—Ä–æ—Å–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await query.message.edit_text(
            text="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.",
            reply_markup=main_menu_keyboard(),
            parse_mode='HTML'
        )

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    try:
        await create_tables()
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Application
        app = Application.builder().token(BOT_TOKEN).build()

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–µ–Ω—é
        commands = [
            BotCommand("start", "Start the bot and receive a welcome message"),
            BotCommand("quiz", "Start a quiz"),
            BotCommand("guide", "Start an interactive guide"),
            BotCommand("faq", "View frequently asked questions"),
            BotCommand("about", "Learn about Decentrathon"),
            BotCommand("subscribe", "Subscribe to event reminders"),
            BotCommand("unsubscribe", "Unsubscribe from event reminders"),
            BotCommand("contacts", "Get organizers' contact information"),
            BotCommand("feedback", "Send feedback to organizers"),
            BotCommand("set_welcome", "Set a custom welcome message for new members"),
            BotCommand("set_links", "Set quick access links for group messages"),
            BotCommand("preview", "Preview the current welcome message or links"),
            BotCommand("notify", "Create an event and notify users"),
            BotCommand("empty", "Clear all commands")
        ]
        await app.bot.set_my_commands(commands)
        logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –º–µ–Ω—é.")

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        app.add_handler(CommandHandler("start", start))
        app.add_handler(ChatMemberHandler(welcome_new_member, ChatMemberHandler.CHAT_MEMBER))
        app.add_handler(CommandHandler("set_welcome", set_welcome))
        app.add_handler(CommandHandler("set_links", set_links))
        app.add_handler(CommandHandler("preview", preview))
        app.add_handler(CommandHandler("notify", notify_command))
        app.add_handler(CommandHandler("empty", empty_command))
        app.add_handler(CommandHandler("faq", faq))
        app.add_handler(CommandHandler("about", about))
        app.add_handler(CommandHandler("subscribe", subscribe))
        app.add_handler(CommandHandler("unsubscribe", unsubscribe))
        app.add_handler(CommandHandler("contacts", contacts))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
        quiz_handler = ConversationHandler(
            entry_points=[CommandHandler('quiz', start_quiz)],
            states={
                QUIZ_QUESTION: [CallbackQueryHandler(quiz_answer)],
            },
            fallbacks=[]
        )
        app.add_handler(quiz_handler)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–∏–¥–∞
        guide_handler = ConversationHandler(
            entry_points=[CommandHandler('guide', start_guide)],
            states={
                GUIDE_STEP: [CallbackQueryHandler(guide_next, pattern='^next$')],
            },
            fallbacks=[]
        )
        app.add_handler(guide_handler)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        feedback_handler = ConversationHandler(
            entry_points=[CommandHandler('feedback', start_feedback)],
            states={
                FEEDBACK_MESSAGE: [MessageHandler(filters.TEXT & (~filters.COMMAND), receive_feedback)],
            },
            fallbacks=[]
        )
        app.add_handler(feedback_handler)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–æ–æ–±—â–µ–Ω–∏–π
        app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), delete_repeated))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
        app.add_handler(CallbackQueryHandler(handle_callback_query))

        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        await app.run_polling(drop_pending_updates=True)

    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}", exc_info=True)
        raise

if __name__ == "__main__":
    import sys
    import asyncio
    import nest_asyncio

    if sys.platform.startswith("win") and sys.version_info >= (3, 8):
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

    nest_asyncio.apply()
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")